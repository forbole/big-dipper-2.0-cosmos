{
  "name": "big-dipper-2.0-cosmos",
  "version": "2.2.0",
  "license": "Apache-2.0",
  "private": true,
  "workspaces": [
    "apps/*",
    "packages/*"
  ],
  "scripts": {
    "dev": "dotenv -v TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) -- turbo run dev --filter=$(dotenv -v TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) -- printenv PROJECT_NAME || echo web)...",
    "dev:ci": "TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) turbo run dev --continue",
    "build": "dotenv -v TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) -- turbo run build --filter=$(dotenv -v TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) -- printenv PROJECT_NAME || echo web)...",
    "build:ci": "TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) turbo run build --continue --concurrency=1",
    "clean": "yarn cache clean --mirror && [ -d \"node_modules\" ] && TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) turbo run clean && rm -rf node_modules",
    "start": "dotenv -v TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) -- turbo run start --filter=$(dotenv -v TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) -- printenv PROJECT_NAME || echo web)...",
    "format": "prettier --write \"{**/src/{,**/}*.{js,ts,tsx,mjs,cjs,md},e2e/{,**/}*.{js,ts,tsx,mjs,cjs,md}}\"",
    "check-types": "dotenv -v TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) -- turbo run check-types --filter=$(dotenv -v TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) -- printenv PROJECT_NAME || echo web)...",
    "check-types:ci": "TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) turbo run check-types --continue",
    "lint": "dotenv -v TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) -- turbo run lint --filter=$(dotenv -v TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) -- printenv PROJECT_NAME || echo web)...",
    "lint:ci": "TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) turbo run lint --continue",
    "test": "dotenv -v TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) -- turbo run test --filter=$(dotenv -v TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) -- printenv PROJECT_NAME || echo web)...",
    "test:ci": "TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) turbo run test --continue",
    "e2e": "playwright test",
    "e2e:install": "playwright install --with-deps",
    "graphql:codegen": "TURBO_BINARY_PATH=$(echo \"console.log(require('child_process').execSync('find .yarn/unplugged/turbo-'+process.platform+'-'+process.arch.replace(/^x/,'')+'-* -name turbo').toString())\" | node) turbo run graphql:codegen --continue",
    "postinstall": "husky install"
  },
  "devDependencies": {
    "@changesets/cli": "^2.26.0",
    "@next/eslint-plugin-next": "^13.1.6",
    "@playwright/test": "^1.30.0",
    "@types/eslint": "^8.4.10",
    "@typescript-eslint/eslint-plugin": "^5.50.0",
    "@typescript-eslint/parser": "^5.50.0",
    "dotenv-cli": "^7.0.0",
    "eslint": "^8.33.0",
    "eslint-config-airbnb": "^19.0.4",
    "eslint-config-custom": "workspace:*",
    "eslint-config-next": "^13.1.6",
    "eslint-config-prettier": "^8.6.0",
    "eslint-config-turbo": "^0.0.7",
    "eslint-import-resolver-typescript": "^3.5.3",
    "eslint-plugin-import": "^2.27.5",
    "eslint-plugin-jsx-a11y": "^6.7.1",
    "eslint-plugin-react": "^7.32.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-turbo": "^0.0.7",
    "husky": "^8.0.3",
    "lint-staged": "^13.1.0",
    "prettier": "2.8.3",
    "turbo": "^1.7.1",
    "typescript": "^4.9.5"
  },
  "packageManager": "yarn@3.3.1",
  "engines": {
    "yarn": ">=1.22"
  },
  "lint-staged": {
    "*.{js,jsx,ts,tsx,mjs,cjs,css,md}": "npx prettier --write"
  }
}
