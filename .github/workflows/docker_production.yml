name: Docker-Production

on:
  push:
    tags:
      - akash-edgenet-1-v*
      - akash-akashnet-2-v*

jobs:
  Build-and-Publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Prepare tags
        id: prep
        run: |
          DOCKER_IMAGE=forbole/big-dipper-2.0-cosmos
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Prepare docker build env
        id: dockerPrep
        run: |
          NEXT_PUBLIC_GRAPHQL_URL=
          NEXT_PUBLIC_GRAPHQL_WS=
          NEXT_PUBLIC_RPC_WEBSOCKET=
          NEXT_PUBLIC_CHAIN_TYPE=
          NODE_ENV="production"
          PORT=3000
          NEXT_PUBLIC_MATOMO_URL="https://analytics.bigdipper.live"
          NEXT_PUBLIC_MATOMO_SITE_ID=5
          if [[ $GITHUB_REF == refs/tags/akash-edgenet-1-v* ]]; then
            NEXT_PUBLIC_GRAPHQL_URL="https://gql-testnet.akash.forbole.com/v1/graphql"
            NEXT_PUBLIC_GRAPHQL_WS="wss://gql-testnet.akash.forbole.com/v1/graphql"
            NEXT_PUBLIC_RPC_WEBSOCKET="wss://rpc-testnet.akash.forbole.com/websocket"
            NEXT_PUBLIC_CHAIN_TYPE="testnet"
          elif [[ $GITHUB_REF == refs/tags/akash-akashnet-2-v* ]]; then
            NEXT_PUBLIC_GRAPHQL_URL="https://gql.akash.forbole.com//v1/graphql"
            NEXT_PUBLIC_GRAPHQL_WS="wss://gql.akash.forbole.com/v1/graphql"
            NEXT_PUBLIC_URL="https://explorer.desmos.network"
            NEXT_PUBLIC_RPC_WEBSOCKET="wss://rpc.akash.forbole.com/websocket"
            NEXT_PUBLIC_CHAIN_TYPE="mainnet"
          fi
          echo ::set-output name=NEXT_PUBLIC_GRAPHQL_URL::${NEXT_PUBLIC_GRAPHQL_URL}
          echo ::set-output name=NEXT_PUBLIC_GRAPHQL_WS::${NEXT_PUBLIC_GRAPHQL_WS}
          echo ::set-output name=NEXT_PUBLIC_RPC_WEBSOCKET::${NEXT_PUBLIC_RPC_WEBSOCKET}
          echo ::set-output name=NEXT_PUBLIC_CHAIN_TYPE::${NEXT_PUBLIC_CHAIN_TYPE}
          echo ::set-output name=NODE_ENV::${NODE_ENV}
          echo ::set-output name=PORT::${PORT}
          echo ::set-output name=NEXT_PUBLIC_MATOMO_URL::${NEXT_PUBLIC_MATOMO_URL}
          echo ::set-output name=NEXT_PUBLIC_MATOMO_SITE_ID::${NEXT_PUBLIC_MATOMO_SITE_ID}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          build-args: |
            "NEXT_PUBLIC_GRAPHQL_URL=${{ steps.dockerPrep.outputs.NEXT_PUBLIC_GRAPHQL_URL }}"
            "NEXT_PUBLIC_GRAPHQL_WS=${{ steps.dockerPrep.outputs.NEXT_PUBLIC_GRAPHQL_WS }}"
            "NEXT_PUBLIC_RPC_WEBSOCKET=${{ steps.dockerPrep.outputs.NEXT_PUBLIC_RPC_WEBSOCKET }}"
            "NEXT_PUBLIC_CHAIN_TYPE=${{ steps.dockerPrep.outputs.NEXT_PUBLIC_CHAIN_TYPE }}"
            "NODE_ENV=${{ steps.dockerPrep.outputs.NODE_ENV }}"
            "PORT=${{ steps.dockerPrep.outputs.PORT }}"
            "NEXT_PUBLIC_MATOMO_URL=${{ steps.dockerPrep.outputs.NEXT_PUBLIC_MATOMO_URL }}"
            "NEXT_PUBLIC_MATOMO_SITE_ID=${{ steps.dockerPrep.outputs.NEXT_PUBLIC_MATOMO_SITE_ID }}"
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
      - name: Deploy to Akash üåê
        env:
          AKASH_EDGENET_1: ${{ secrets.AKASH_EDGENET_1 }}
          AKASH_AKASHNET_2: ${{ secrets.AKASH_AKASHNET_2 }}
          AKASH_WEBHOOK_SECRET: ${{ secrets.AKASH_WEBHOOK_SECRET }}
        run: |
            BRANCH=${GITHUB_REF}
            WEBHOOK_URL=''
            if [[ $GITHUB_REF == refs/tags/akash-edgenet-1-v* ]]; then
              echo 'Deploying to Akash edgenet-1'
              WEBHOOK_URL=$AKASH_EDGENET_1
            elif [[ $GITHUB_REF == refs/tags/akash-akashnet-2-v* ]]; then
              echo 'Deploying to Akash akashnet-2-v*'
              # WEBHOOK_URL=$AKASH_AKASHNET_2
            fi
              curl -i -X POST -H "Content-Type: application/json" -d '{"parameters":{"tag": "${{ steps.prep.outputs.version }}"}}' -k $WEBHOOK_URL -u "deploy:$AKASH_WEBHOOK_SECRET"


