name: Test
on:
  pull_request:
concurrency:
  group: ${{ github.ref }}-test
  cancel-in-progress: true
env:
  HUSKY: 0
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  NEXT_TELEMETRY_DISABLED: 1
  SENTRYCLI_SKIP_DOWNLOAD: 1
defaults:
  run:
    shell: bash
jobs:
  install:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.dry-run.outputs.projects }}
      cache-directory: ${{ steps.vars.outputs.cache-directory }}
      cashe-key: ${{ steps.vars.outputs.cache-key }}
      restore-keys: ${{ steps.vars.outputs.restore-keys }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: corepack enable
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      - name: Set needs.install.outputs.{cache-directory,cache-key,restore-keys}
        id: vars
        run: |
          echo 'cache-directory=${{ github.workspace }}/node_modules' | tee -a $GITHUB_OUTPUT

          echo 'cache-key=${{ format(
            '{0}-{1}-{2}',
            runner.os,
            hashFiles('**/yarn.lock'),
            hashFiles(
              format('apps/{0}/**/*.[jt]s', matrix.project),
              format('apps/{0}/**/*.[jt]sx', matrix.project),
              'packages/**/*.[jt]s',
              'packages/**/*.[jt]sx'
            )
          ) }}' | tee -a $GITHUB_OUTPUT

          echo 'restore-keys=${{ format(
            '{0}-{1}-',
            runner.os,
            hashFiles('**/yarn.lock')
          ) }}' | tee -a $GITHUB_OUTPUT
      - uses: actions/cache@v3
        with:
          path: ${{ steps.vars.outputs.cache-directory }}
          key: ${{ steps.vars.outputs.cache-key }}
          restore-keys: ${{ steps.vars.outputs.restore-keys }}
      - name: Install modules
        run: yarn install --immutable
      - name: Set needs.install.outputs.projects
        id: dry-run
        run: |
          DRY_BUILD_JSON=$(
            yarn turbo run build --dry='json'
              --filter='[${{ github.event.pull_request.base.sha }}]'
          ) node <<EOF | tee -a $GITHUB_OUTPUT $GITHUB_STEP_SUMMARY
          const { packages } = JSON.parse(process.env.DRY_BUILD_JSON);
          console.log('projects=' + JSON.stringify(
            packages.filter(p => /^(?:ui|web.*)$/.test(p))
          ));
          EOF
  check-types:
    if: ${{ success() && needs.install.outputs.projects != '[]' }}
    needs: install
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.install.outputs.projects) }}
    steps:
      - uses: actions/checkout@v3
      - run: corepack enable
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      - uses: actions/cache@v3
        with:
          path: ${{ needs.install.outputs.cache-directory }}
          key: ${{ needs.install.outputs.cashe-key }}
          restore-keys: ${{ needs.install.outputs.restore-keys }}
      - run: yarn install --immutable --immutable-cache
      - run: yarn turbo run check-types --filter=${{ matrix.project }}
  lint:
    if: ${{ success() && needs.install.outputs.projects != '[]' }}
    needs: install
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.install.outputs.projects) }}
    steps:
      - uses: actions/checkout@v3
      - run: corepack enable
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      - uses: actions/cache@v3
        with:
          path: ${{ needs.install.outputs.cache-directory }}
          key: ${{ needs.install.outputs.cashe-key }}
          restore-keys: ${{ needs.install.outputs.restore-keys }}
      - run: yarn install --immutable --immutable-cache
      - run: yarn turbo run lint --filter=${{ matrix.project }}
  test:
    if: ${{ success() && needs.install.outputs.projects != '[]' }}
    needs: install
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.install.outputs.projects) }}
    steps:
      - uses: actions/checkout@v3
      - run: corepack enable
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      - uses: actions/cache@v3
        with:
          path: ${{ needs.install.outputs.cache-directory }}
          key: ${{ needs.install.outputs.cashe-key }}
          restore-keys: ${{ needs.install.outputs.restore-keys }}
      - run: yarn install --immutable --immutable-cache
      - run: |
          echo '```' >> $GITHUB_STEP_SUMMARY
          yarn test:ci --filter=${{ matrix.project }} -- --coverage |
            tee -a $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
  build:
    if: ${{ success() && needs.install.outputs.projects != '[]' }}
    needs: install
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.install.outputs.projects) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: corepack enable
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      - uses: actions/cache@v3
        with:
          path: |
            ${{ needs.install.outputs.cache-directory }}
            ${{ github.workspace }}/apps/${{ matrix.project }}/.next/cache
          key: ${{ needs.install.outputs.cashe-key }}-${{ matrix.project }}
          restore-keys: ${{ needs.install.outputs.restore-keys }}${{ matrix.project }}-
      - run: yarn install --immutable --immutable-cache
      - run: yarn build:ci --filter=${{ matrix.project }}
  e2e:
    if: ${{ success() }}
    needs: [install, check-types, lint, test, build]
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.28.1-focal
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.install.outputs.projects) }}
        os:
          - chromium
          # - firefox
          # - webkit
          # - mobile-chrome
          - mobile-safari
        shardIndex: [1, 2]
        shardTotal: [2]
    steps:
      - uses: actions/checkout@v3
      - run: corepack enable
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      - uses: actions/cache@v3
        with:
          path: |
            ${{ needs.install.outputs.cache-directory }}
            ${{ github.workspace }}/apps/${{ matrix.project }}/.next/cache
          key: ${{ needs.install.outputs.cashe-key }}-${{ matrix.project }}
          restore-keys: ${{ needs.install.outputs.restore-keys }}}${{ matrix.project }}-
      - run: yarn build
        env:
          PROJECT_NAME: ${{ matrix.project }}
      - run: |
          echo Trace can be view at https://trace.playwright.dev/ | tee -a $GITHUB_STEP_SUMMARY
          yarn playwright test --project=${{ matrix.os }} --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }} | tee -a $GITHUB_STEP_SUMMARY
        env:
          PROJECT_NAME: ${{ matrix.project }}
          PLAYWRIGHT_HTML_REPORT: playwright-report/${{ matrix.os }}/${{ matrix.shardIndex }}
      - uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
