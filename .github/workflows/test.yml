name: Test
on:
  pull_request:
concurrency:
  group: ${{ github.ref }}-test
  cancel-in-progress: true
env:
  HUSKY: 0
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  NEXT_TELEMETRY_DISABLED: 1
  SENTRYCLI_SKIP_DOWNLOAD: 1
defaults:
  run:
    shell: bash
jobs:
  check-cache:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.vars.outputs.projects }}
    steps:
      -
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      -
        name: Update yarn
        run: corepack enable
      -
        name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      -
        name: Install modules
        run: yarn install --immutable --check-cache
      -
        name: Set needs.install.outputs.projects
        id: vars
        run: |
          DRY_BUILD_JSON=$(
            yarn turbo run build --dry='json'
              --filter='[${{ github.event.pull_request.base.sha }}]'
          ) node <<EOF | tee -a $GITHUB_OUTPUT $GITHUB_STEP_SUMMARY
          const { packages } = JSON.parse(process.env.DRY_BUILD_JSON);
          console.log('projects=' + JSON.stringify(
            packages.filter(p => /^(?:ui|web.*)$/.test(p))
          ));
          EOF
  check-types:
    if: ${{ success() && needs.install.outputs.projects != '[]' }}
    needs: check-cache
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.install.outputs.projects) }}
    steps:
      -
        uses: actions/checkout@v3
      -
        name: Update yarn
        run: corepack enable
      -
        name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      -
        name: Run check-types, lint
        run: yarn turbo run check-types lint --filter=${{ matrix.project }}
  lint:
    if: ${{ success() && needs.install.outputs.projects != '[]' }}
    needs: check-cache
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.install.outputs.projects) }}
    steps:
      -
        uses: actions/checkout@v3
      -
        name: Update yarn
        run: corepack enable
      -
        name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      -
        name: Run check-types, lint
        run: yarn turbo run lint --filter=${{ matrix.project }}
  test:
    if: ${{ success() && needs.install.outputs.projects != '[]' }}
    needs: check-cache
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.install.outputs.projects) }}
    steps:
      -
        uses: actions/checkout@v3
      -
        name: Update yarn
        run: corepack enable
      -
        name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      -
        name: Run tests
        run: |
          echo '```' >> $GITHUB_STEP_SUMMARY
          yarn test:ci --filter=${{ matrix.project }} -- --coverage |
            tee -a $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
  build:
    if: ${{ success() && needs.install.outputs.projects != '[]' }}
    needs: check-cache
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.install.outputs.projects) }}
    runs-on: ubuntu-latest
    steps:
      -
        uses: actions/checkout@v3
      -
        name: Update yarn
        run: corepack enable
      -
        name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      -
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/apps/${{ matrix.project }}/.next/cache
          key: ${{ format('{0}-{1}-{2}-{3}-{4}',
            runner.os,
            'next',
            hashFiles('**/yarn.lock'),
            matrix.project,
            hashFiles(
              format('apps/{0}/**/*.[jt]s', matrix.project),
              format('apps/{0}/**/*.[jt]sx', matrix.project),
              'packages/**/*.[jt]s',
              'packages/**/*.[jt]sx'
            )) }}
          restore-keys: ${{ format('{0}-{1}-{2}-{3}-',
            runner.os,
            'next',
            hashFiles('**/yarn.lock'),
            matrix.project) }}
      -
        name: Run build
        run: yarn build:ci --filter=${{ matrix.project }}
  e2e:
    if: ${{ success() }}
    needs: [check-cache, check-types, lint, test, build]
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.28.1-focal
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.install.outputs.projects) }}
        os:
          - chromium
          # - firefox
          # - webkit
          # - mobile-chrome
          - mobile-safari
        shardIndex: [1, 2]
        shardTotal: [2]
    steps:
      -
        uses: actions/checkout@v3
      -
        name: Update yarn
        run: corepack enable
      -
        name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      -
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/apps/web/.next/cache
          key: ${{ format('{0}-{1}-{2}-{3}-{4}',
            runner.os,
            'next',
            hashFiles('**/yarn.lock'),
            'web',
            hashFiles(
              format('apps/{0}/**/*.[jt]s', 'web'),
              format('apps/{0}/**/*.[jt]sx', 'web'),
              'packages/**/*.[jt]s',
              'packages/**/*.[jt]sx'
            )) }}
          restore-keys: ${{ format('{0}-{1}-{2}-{3}-',
            runner.os,
            'next',
            hashFiles('**/yarn.lock'),
            'web') }}
      -
        name: Build Next.js app
        run: yarn build
      -
        name: Run Playwright tests
        env:
          PROJECT_NAME: ${{ matrix.project }}
          PLAYWRIGHT_HTML_REPORT: playwright-report/${{ matrix.os }}/${{ matrix.shardIndex }}
        run: |
          echo Trace can be view at https://trace.playwright.dev/ | tee -a $GITHUB_STEP_SUMMARY
          yarn playwright test --project=${{ matrix.os }} --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }} | tee -a $GITHUB_STEP_SUMMARY
      -
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
