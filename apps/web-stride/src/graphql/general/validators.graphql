query Validators {
  stakingPool: staking_pool(limit: 1, order_by: {height: desc}) {
    bondedTokens: bonded_tokens
  }
  validator {
    validatorStatuses: validator_statuses(order_by: {height: desc}, limit: 1) {
      status
      jailed
      height
    }
    validatorSigningInfos: validator_signing_infos(order_by: {height: desc}, limit: 1) {
      missedBlocksCounter: missed_blocks_counter
      tombstoned
    }
    ccv_validator {
      providerOperatorAddress: provider_operator_address
    }
    validatorDescriptions: validator_descriptions {
      moniker
      avatar_url
      validator_address
      website
      details
    }
    validatorInfo: validator_info {
      operatorAddress: operator_address
      selfDelegateAddress: self_delegate_address
    }
    validatorVotingPowers: validator_voting_powers(offset: 0, limit: 1, order_by: {height: desc}) {
      votingPower: voting_power
    }
    validatorCommissions: validator_commissions(order_by: {height: desc}, limit: 1) {
      commission
    }
    validatorSigningInfos: validator_signing_infos(order_by: {height: desc}, limit: 1) {
      missedBlocksCounter: missed_blocks_counter
    }
  }
  slashingParams: slashing_params(order_by: {height: desc}, limit: 1) {
    params
  }
}

query ConsumerCustomValidator($consumerAddress: String) {
  validatorInfo: validator_info(where: {operator_address: {_eq: $consumerAddress}}) {
    validator {
      validatorDescriptions: validator_descriptions {
        moniker
        avatar_url
        validator_address
        website
        details
      }
    }
  }
}

query ProviderCustomValidator($providerAddress: String) {
  ccv_validator(where: {provider_operator_address: {_eq: $providerAddress}}) {
    ccv_validator_info {
      operator_address
      validator {
        validatorDescriptions: validator_descriptions {
          moniker
          avatar_url
          validator_address
          website
          details
        }
      }
  	}
  }
}